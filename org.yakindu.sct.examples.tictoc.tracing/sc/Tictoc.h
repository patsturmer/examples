/** Generated by YAKINDU Statechart Tools code generator. */

#ifndef TICTOC_H_
#define TICTOC_H_

#include "base/sc_tracing.h"
#include "base/sc_types.h"

#ifdef __cplusplus
extern "C" { 
#endif 

/*! \file Header of the state machine 'tictoc'.
*/

#ifndef SC_INVALID_EVENT_VALUE
#define SC_INVALID_EVENT_VALUE 0
#endif
/*! Define number of states in the state enum */

#define TICTOC_STATE_COUNT 4

/*! Define dimension of the state configuration vector for orthogonal states. */
#define TICTOC_MAX_ORTHOGONAL_STATES 1

/*! Define maximum number of time events that can be active at once */
#define TICTOC_MAX_PARALLEL_TIME_EVENTS 2

/*! Define indices of states in the StateConfVector */
#define SCVI_TICTOC_MAIN_IDLE 0
#define SCVI_TICTOC_MAIN_PLAYING 0
#define SCVI_TICTOC_MAIN_PLAYING_ACTIVE_TIC 0
#define SCVI_TICTOC_MAIN_PLAYING_ACTIVE_TOC 0



/*! Enumeration of all states */ 
typedef enum
{
	Tictoc_last_state,
	Tictoc_main_Idle,
	Tictoc_main_Playing,
	Tictoc_main_Playing_active_Tic,
	Tictoc_main_Playing_active_Toc
} TictocStates;
		
/*! Enumeration of all features of the statechart */ 
typedef enum
{
	tictoc_no_feature = SC_NO_EVENT,
	tictocIface_toggle,
	tictocIface_tic,
	tictocIface_toc,
	tictocIface_count,
	tictocIface_delay,
	tictocIface_x,
	tictocIface_b,
	tictocIface_y,
	tictocIface_i
} TictocFeature;

/*! Type definition of the data structure for the TictocIface interface scope. */
typedef struct
{
	sc_boolean toggle_raised;
	sc_boolean tic_raised;
	sc_boolean toc_raised;
	sc_integer count;
	sc_integer delay;
	sc_integer x;
	sc_boolean b;
} TictocIface;



/*! Type definition of the data structure for the TictocIfaceFoo interface scope. */
typedef struct
{
	sc_integer y;
} TictocIfaceFoo;



/*! Type definition of the data structure for the TictocInternal interface scope. */
typedef struct
{
	sc_real i;
} TictocInternal;



/*! Type definition of the data structure for the TictocTimeEvents interface scope. */
typedef struct
{
	sc_boolean tictoc_main_Idle_tev0_raised;
	sc_boolean tictoc_main_Playing_tev0_raised;
	sc_boolean tictoc_main_Playing_active_Tic_tev0_raised;
	sc_boolean tictoc_main_Playing_active_Toc_tev0_raised;
} TictocTimeEvents;




/*! 
 * Type definition of the data structure for the Tictoc state machine.
 * This data structure has to be allocated by the client code. 
 */
typedef struct
{
	TictocStates stateConfVector[TICTOC_MAX_ORTHOGONAL_STATES];
	sc_ushort stateConfVectorPosition; 
	TictocIface iface;
	TictocIfaceFoo ifaceFoo;
	TictocInternal internal;
	TictocTimeEvents timeEvents;
	sc_trace_handler *trace_handler;
} Tictoc;


/*! Initializes the Tictoc state machine data structures. Must be called before first usage.*/
extern void tictoc_initWithTracing(Tictoc* handle, sc_trace_handler* trace_handler);

/*! Sets the trace handler. Can be called any time. */
extern void tictoc_setTraceHandler(Tictoc* handle, sc_trace_handler* trace_handler);

/*! Initializes the Tictoc state machine data structures. Must be called before first usage.*/
extern void tictoc_init(Tictoc* handle);

/*! Activates the state machine */
extern void tictoc_enter(Tictoc* handle);

/*! Deactivates the state machine */
extern void tictoc_exit(Tictoc* handle);

/*! Performs a 'run to completion' step. */
extern void tictoc_runCycle(Tictoc* handle);

/*! Raises a time event. */
extern void tictoc_raiseTimeEvent(Tictoc* handle, sc_eventid evid);

/*! Raises the in event 'toggle' that is defined in the default interface scope. */ 
extern void tictocIface_raise_toggle(Tictoc* handle);

/*! Checks if the out event 'tic' that is defined in the default interface scope has been raised. */ 
extern sc_boolean tictocIface_israised_tic(const Tictoc* handle);

/*! Checks if the out event 'toc' that is defined in the default interface scope has been raised. */ 
extern sc_boolean tictocIface_israised_toc(const Tictoc* handle);

/*! Gets the value of the variable 'count' that is defined in the default interface scope. */ 
extern sc_integer tictocIface_get_count(const Tictoc* handle);
/*! Sets the value of the variable 'count' that is defined in the default interface scope. */ 
extern void tictocIface_set_count(Tictoc* handle, sc_integer value);
/*! Gets the value of the variable 'delay' that is defined in the default interface scope. */ 
extern sc_integer tictocIface_get_delay(const Tictoc* handle);
/*! Sets the value of the variable 'delay' that is defined in the default interface scope. */ 
extern void tictocIface_set_delay(Tictoc* handle, sc_integer value);
/*! Gets the value of the variable 'x' that is defined in the default interface scope. */ 
extern sc_integer tictocIface_get_x(const Tictoc* handle);
/*! Sets the value of the variable 'x' that is defined in the default interface scope. */ 
extern void tictocIface_set_x(Tictoc* handle, sc_integer value);
/*! Gets the value of the variable 'b' that is defined in the default interface scope. */ 
extern sc_boolean tictocIface_get_b(const Tictoc* handle);
/*! Sets the value of the variable 'b' that is defined in the default interface scope. */ 
extern void tictocIface_set_b(Tictoc* handle, sc_boolean value);
/*! Gets the value of the variable 'y' that is defined in the interface scope 'foo'. */ 
extern sc_integer tictocIfaceFoo_get_y(const Tictoc* handle);
/*! Sets the value of the variable 'y' that is defined in the interface scope 'foo'. */ 
extern void tictocIfaceFoo_set_y(Tictoc* handle, sc_integer value);

/*!
 * Checks whether the state machine is active (until 2.4.1 this method was used for states).
 * A state machine is active if it was entered. It is inactive if it has not been entered at all or if it has been exited.
 */
extern sc_boolean tictoc_isActive(const Tictoc* handle);

/*!
 * Checks if all active states are final. 
 * If there are no active states then the state machine is considered being inactive. In this case this method returns false.
 */
extern sc_boolean tictoc_isFinal(const Tictoc* handle);

/*! Checks if the specified state is active (until 2.4.1 the used method for states was called isActive()). */
extern sc_boolean tictoc_isStateActive(const Tictoc* handle, TictocStates state);


#ifdef __cplusplus
}
#endif 

#endif /* TICTOC_H_ */
